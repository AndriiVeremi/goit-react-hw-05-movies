{"version":3,"file":"static/js/314.8089a39f.chunk.js","mappings":"+TA4FA,EA5EqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAElDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAEKC,EAAAA,EAAAA,IAAYb,GAFjB,OAERc,EAFQ,OAGRC,EAASD,EAAKA,KACpBV,EAAYW,GAJE,gDAMdC,QAAQC,MAAM,SANA,yDAAH,qDASfL,GACD,GAAE,CAACZ,IAEJ,IAAQkB,EAAuDf,EAAvDe,YAAaC,EAA0ChB,EAA1CgB,MAAOC,EAAmCjB,EAAnCiB,aAAcC,EAAqBlB,EAArBkB,OAAQC,EAAanB,EAAbmB,SAElD,OACE,iCACE,SAAC,KAAD,CAAQC,GAAIhB,EAAWiB,QAAvB,SAAgC,wBAChC,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,IACEP,EAAW,0CAC4BA,GACnCQ,EAENC,IAAKR,EACLS,MAAM,MACNC,OAAO,UAET,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,UAAYV,KACZ,yBAAG,iBAA8B,GAAfC,GAAmBU,QAAQ,GAAG,WAElD,UAAC,KAAD,YACE,wBAAI,cACJ,uBAAIR,QAEN,UAAC,KAAD,YACE,wBAAI,WACHD,IACC,wBACGA,EAAOU,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAiBD,EAAME,MAAdD,EADC,UAMlB,mBACA,wBAAI,4BACJ,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CAASV,GAAG,OAAZ,SAAmB,YAErB,SAAC,KAAD,WACE,SAAC,KAAD,CAASA,GAAG,UAAZ,SAAsB,wBAK9B,mBACA,SAAC,EAAAY,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QAIP,C,+LCxFKC,EAAW,gCACXC,EAAU,mCAGHC,EAAe,mCAAG,sGAErBC,EAFqB,UAENH,EAFM,uCAEiCC,GAFjC,SAGJG,EAAAA,EAAAA,IAAUD,GAHN,cAGrBE,EAHqB,yBAIpBA,GAJoB,gCAM3B1B,QAAQC,MAAM,4BANa,yDAAH,qDAWf0B,EAAW,mCAAG,WAAOC,GAAP,yFAEjBJ,EAFiB,UAEFH,EAFE,iCAE+BC,EAF/B,kBAEgDM,GAFhD,SAGAH,EAAAA,EAAAA,IAAUD,GAHV,cAGjBE,EAHiB,yBAIhBA,GAJgB,gCAMvB1B,QAAQC,MAAM,4BANS,yDAAH,sDAWXJ,EAAW,mCAAG,WAAOb,GAAP,yFAEjBwC,EAFiB,UAEFH,EAFE,iBAEerC,EAFf,oBAEkCsC,GAFlC,SAGAG,EAAAA,EAAAA,IAAUD,GAHV,cAGjBE,EAHiB,yBAIhBA,GAJgB,gCAMvB1B,QAAQC,MAAM,4BANS,yDAAH,sDAWX4B,EAAW,mCAAG,WAAO7C,GAAP,yFAEjBwC,EAFiB,UAEFH,EAFE,iBAEerC,EAFf,4BAE0CsC,GAF1C,SAGAG,EAAAA,EAAAA,IAAUD,GAHV,cAGjBE,EAHiB,yBAIhBA,GAJgB,gCAMvB1B,QAAQC,MAAM,4BANS,yDAAH,sDAWX6B,EAAc,mCAAG,WAAO9C,GAAP,yFAEpBwC,EAFoB,UAELH,EAFK,iBAEYrC,EAFZ,4BAEuCsC,GAFvC,SAGHG,EAAAA,EAAAA,IAAUD,GAHP,cAGpBE,EAHoB,yBAInBA,GAJmB,gCAM1B1B,QAAQC,MAAM,4BANY,yDAAH,qD","sources":["pages/MovieDetails.jsx","serviceAPI/serviceAPI.jsx"],"sourcesContent":["import { useEffect, useState, useRef, Suspense } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { getMoveInfo } from '../serviceAPI/serviceAPI';\nimport DefaultImg from '../images/noImageH.jpg';\nimport {\n  Button,\n  Content,\n  InfoList,\n  InfoItem,\n  InfoTitle,\n  Image,\n  ListAdd,\n  ItemAdd,\n  LinkAdd,\n} from '../styled/styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [moveInfo, setMoveInfo] = useState([]);\n\n  const location = useLocation();\n  const buttonBack = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const infoMoves = async () => {\n      try {\n        const data = await getMoveInfo(movieId);\n        const newMov = data.data;\n        setMoveInfo(newMov);\n      } catch (error) {\n        console.error('error');\n      }\n    };\n    infoMoves();\n  }, [movieId]);\n\n  const { poster_path, title, vote_average, genres, overview } = moveInfo;\n\n  return (\n    <>\n      <Button to={buttonBack.current}>Back to collection</Button>\n      <Content>\n        <Image\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : DefaultImg\n          }\n          alt={title}\n          width=\"500\"\n          height=\"auto\"\n        />\n        <InfoList>\n          <InfoItem>\n            <InfoTitle>{title}</InfoTitle>\n            <p>Users Score: {(vote_average * 10).toFixed(0)}%</p>\n          </InfoItem>\n          <InfoItem>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n          </InfoItem>\n          <InfoItem>\n            <h2>Genres</h2>\n            {genres && (\n              <ul>\n                {genres.map((genre, index) => (\n                  <li key={index}>{genre.name}</li>\n                ))}\n              </ul>\n            )}\n          </InfoItem>\n          <hr />\n          <h3>Additional information</h3>\n          <ListAdd>\n            <ItemAdd>\n              <LinkAdd to=\"cast\">Cast</LinkAdd>\n            </ItemAdd>\n            <ItemAdd>\n              <LinkAdd to=\"reviews\">Reviews</LinkAdd>\n            </ItemAdd>\n          </ListAdd>\n        </InfoList>\n      </Content>\n      <hr />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '5257856f789bada50296aabdc3a8b8f3';\n\n// Запит на список найпопулярніших\nexport const getMoveTrending = async () => {\n  try {\n    const fetchLink = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n    const response = await axios.get(fetchLink);\n    return response;\n  } catch (error) {\n    console.error('Oops, there is no movies');\n  }\n};\n\n// Запит за ключовим словом\nexport const getMoveName = async (searchQuery) => {\n  try {\n    const fetchLink = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`;\n    const response = await axios.get(fetchLink);\n    return response;\n  } catch (error) {\n    console.error('Oops, there is no movies');\n  }\n};\n\n// Запит за інформації про фільм по ID\nexport const getMoveInfo = async (movieId) => {\n  try {\n    const fetchLink = `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`;\n    const response = await axios.get(fetchLink);\n    return response;\n  } catch (error) {\n    console.error('Oops, there is no movies');\n  }\n};\n\n// Запит за інформації про фільм по ID Cast\nexport const getMoveCast = async (movieId) => {\n  try {\n    const fetchLink = `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    const response = await axios.get(fetchLink);\n    return response;\n  } catch (error) {\n    console.error('Oops, there is no movies');\n  }\n};\n\n// Запит за інформації про фільм по ID Reviews\nexport const getMoveReviews = async (movieId) => {\n  try {\n    const fetchLink = `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`;\n    const response = await axios.get(fetchLink);\n    return response;\n  } catch (error) {\n    console.error('Oops, there is no movies');\n  }\n};\n"],"names":["movieId","useParams","useState","moveInfo","setMoveInfo","location","useLocation","buttonBack","useRef","state","from","useEffect","infoMoves","getMoveInfo","data","newMov","console","error","poster_path","title","vote_average","genres","overview","to","current","src","DefaultImg","alt","width","height","toFixed","map","genre","index","name","Suspense","fallback","BASE_URL","API_KEY","getMoveTrending","fetchLink","axios","response","getMoveName","searchQuery","getMoveCast","getMoveReviews"],"sourceRoot":""}